{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\pc\\\\Desktop\\\\nftPlatform\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\pc\\\\Desktop\\\\nftPlatform\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\pc\\\\Desktop\\\\nftPlatform\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\pc\\\\Desktop\\\\nftPlatform\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\pc\\\\Desktop\\\\nftPlatform\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\pc\\\\Desktop\\\\nftPlatform\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"C:\\\\Users\\\\pc\\\\Desktop\\\\nftPlatform\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\pc\\\\Desktop\\\\nftPlatform\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\pc\\\\Desktop\\\\nftPlatform\\\\src\\\\components\\\\App.js\";\nimport React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport KryptoBird from '../abis/KryptoBird.json';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadweb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"loadweb3\",\n    value: function () {\n      var _loadweb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var provider;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return detectEthereumProvider();\n\n              case 2:\n                provider = _context2.sent;\n\n                if (provider) {\n                  console.log('ethereum wallet connected');\n                  window.web3 = new Web3(provider);\n                } else {\n                  console.log('no ethereum provider detected');\n                }\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadweb3() {\n        return _loadweb.apply(this, arguments);\n      }\n\n      return loadweb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var web3, accounts, netWorkId, networkData, abi, address, contract, totalSupply, i, _KryptoBird;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3;\n                _context3.next = 3;\n                return window.ethereum.request({\n                  method: 'eth_requestAccounts'\n                });\n\n              case 3:\n                accounts = _context3.sent;\n                this.setState({\n                  account: accounts\n                });\n                console.log(this.state.account);\n                _context3.next = 8;\n                return web3.eth.net.getId();\n\n              case 8:\n                netWorkId = _context3.sent;\n                networkData = KryptoBird.networks[netWorkId];\n\n                if (!networkData) {\n                  _context3.next = 33;\n                  break;\n                }\n\n                abi = KryptoBird.abi;\n                address = networkData.address;\n                contract = new web3.eth.Contract(abi, address);\n                this.setState({\n                  contract: contract\n                });\n                console.log(this.state.contract);\n                _context3.next = 18;\n                return contract.methods.totalSupply().call();\n\n              case 18:\n                totalSupply = _context3.sent;\n                this.setState({\n                  totalSupply: totalSupply\n                });\n                console.log(this.state.totalSupply);\n                i = 1;\n\n              case 22:\n                if (!(i <= totalSupply)) {\n                  _context3.next = 30;\n                  break;\n                }\n\n                _context3.next = 25;\n                return contract.methods.kryptoBirdz(i - 1).call();\n\n              case 25:\n                _KryptoBird = _context3.sent;\n                this.state({\n                  kryptoBirdz: [].concat(_toConsumableArray(this.state.kryptoBirdz), [_KryptoBird])\n                });\n\n              case 27:\n                i++;\n                _context3.next = 22;\n                break;\n\n              case 30:\n                console.log(this.state.kryptoBirdz);\n                _context3.next = 34;\n                break;\n\n              case 33:\n                window.alert('smart contract not deployed');\n\n              case 34:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.mint = function (KryptoBird) {\n      _this.state.contract.methods.mint(KryptoBird).send({\n        from: _this.state.account\n      }).once('receipt', function (receipt) {\n        _this.setState;\n      });\n    };\n\n    _this.state = {\n      account: '',\n      contract: null,\n      totalSupply: 0,\n      kryptoBirdz: []\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, React.createElement(\"nav\", {\n        className: \"navbar navbar-dark fixed-top bg-dark flex-md-nowrap shaddow p-0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"navbar-brand col-sm-3 col-md-3 mr-0\",\n        style: {\n          color: 'white'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, \"Krypto Birdz NFTs (Non Fungible Tokens)\"), React.createElement(\"ul\", {\n        className: \"navbar-nav px-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        className: \"nav-item text-nowrap d-none d-sm-none d-sm d-sm-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, React.createElement(\"small\", {\n        className: \"text-white\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, this.state.account)))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\pc\\Desktop\\nftPlatform\\src\\components\\App.js"],"names":["React","Component","Web3","detectEthereumProvider","KryptoBird","App","loadweb3","loadBlockchainData","provider","console","log","window","web3","ethereum","request","method","accounts","setState","account","state","eth","net","getId","netWorkId","networkData","networks","abi","address","contract","Contract","methods","totalSupply","call","i","kryptoBirdz","alert","props","mint","send","from","once","receipt","color"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAiBC,SAAjB,QAAkC,OAAlC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,sBAAP,MAAmC,2BAAnC;AACA,OAAOC,UAAP,MAAuB,yBAAvB;;IAEMC,G;;;;;;;;;;;;;;;;uBAEQ,KAAKC,QAAL,E;;;;uBACA,KAAKC,kBAAL,E;;;;;;;;;;;;;;;;;;;;;;;;;;;;uBAIiBJ,sBAAsB,E;;;AAAvCK,gBAAAA,Q;;AACN,oBAAGA,QAAH,EAAY;AACRC,kBAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACAC,kBAAAA,MAAM,CAACC,IAAP,GAAc,IAAIV,IAAJ,CAASM,QAAT,CAAd;AACH,iBAHD,MAGM;AACFC,kBAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIKE,gBAAAA,I,GAAOD,MAAM,CAACC,I;;uBACGD,MAAM,CAACE,QAAP,CAAgBC,OAAhB,CAAwB;AAAEC,kBAAAA,MAAM,EAAE;AAAV,iBAAxB,C;;;AAAjBC,gBAAAA,Q;AACN,qBAAKC,QAAL,CAAc;AAACC,kBAAAA,OAAO,EAACF;AAAT,iBAAd;AACAP,gBAAAA,OAAO,CAACC,GAAR,CAAY,KAAKS,KAAL,CAAWD,OAAvB;;uBAEwBN,IAAI,CAACQ,GAAL,CAASC,GAAT,CAAaC,KAAb,E;;;AAAlBC,gBAAAA,S;AACAC,gBAAAA,W,GAAcpB,UAAU,CAACqB,QAAX,CAAoBF,SAApB,C;;qBACfC,W;;;;;AACKE,gBAAAA,G,GAAMtB,UAAU,CAACsB,G;AACjBC,gBAAAA,O,GAAUH,WAAW,CAACG,O;AACtBC,gBAAAA,Q,GAAW,IAAIhB,IAAI,CAACQ,GAAL,CAASS,QAAb,CAAsBH,GAAtB,EAA2BC,OAA3B,C;AACjB,qBAAKV,QAAL,CAAc;AAACW,kBAAAA,QAAQ,EAARA;AAAD,iBAAd;AACAnB,gBAAAA,OAAO,CAACC,GAAR,CAAY,KAAKS,KAAL,CAAWS,QAAvB;;uBAE0BA,QAAQ,CAACE,OAAT,CAAiBC,WAAjB,GAA+BC,IAA/B,E;;;AAApBD,gBAAAA,W;AACN,qBAAKd,QAAL,CAAc;AAACc,kBAAAA,WAAW,EAAXA;AAAD,iBAAd;AACAtB,gBAAAA,OAAO,CAACC,GAAR,CAAY,KAAKS,KAAL,CAAWY,WAAvB;AAGcE,gBAAAA,C,GAAI,C;;;sBAAGA,CAAC,IAAIF,W;;;;;;uBACSH,QAAQ,CAACE,OAAT,CAAiBI,WAAjB,CAA6BD,CAAC,GAAG,CAAjC,EAAoCD,IAApC,E;;;AAAnB5B,gBAAAA,W;AACZ,qBAAKe,KAAL,CAAW;AACPe,kBAAAA,WAAW,+BAAK,KAAKf,KAAL,CAAWe,WAAhB,IAA6B9B,WAA7B;AADJ,iBAAX;;;AAFmC6B,gBAAAA,CAAC,E;;;;;AAMhCxB,gBAAAA,OAAO,CAACC,GAAR,CAAY,KAAKS,KAAL,CAAWe,WAAvB;;;;;AAERvB,gBAAAA,MAAM,CAACwB,KAAP,CAAa,6BAAb;;;;;;;;;;;;;;;;;;AAYR,eAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,6EAAMA,KAAN;;AADe,UAPnBC,IAOmB,GAPZ,UAACjC,UAAD,EAAgB;AACnB,YAAKe,KAAL,CAAWS,QAAX,CAAoBE,OAApB,CAA4BO,IAA5B,CAAiCjC,UAAjC,EAA6CkC,IAA7C,CAAkD;AAACC,QAAAA,IAAI,EAAC,MAAKpB,KAAL,CAAWD;AAAjB,OAAlD,EACCsB,IADD,CACM,SADN,EACiB,UAACC,OAAD,EAAY;AAC1B,cAAKxB,QAAL;AACF,OAHD;AAIH,KAEkB;;AAEf,UAAKE,KAAL,GAAa;AACTD,MAAAA,OAAO,EAAE,EADA;AAETU,MAAAA,QAAQ,EAAE,IAFD;AAGTG,MAAAA,WAAW,EAAC,CAHH;AAITG,MAAAA,WAAW,EAAC;AAJH,KAAb;AAFe;AASlB;;;;6BAES;AACN,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,iEAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC;AAAK,QAAA,SAAS,EAAC,qCAAf;AACK,QAAA,KAAK,EAAE;AAACQ,UAAAA,KAAK,EAAC;AAAP,SADZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDADD,EAKC;AAAI,QAAA,SAAS,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAI,QAAA,SAAS,EAAC,uDAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC;AAAO,QAAA,SAAS,EAAC,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKvB,KAAL,CAAWD,OADhB,CADD,CADF,CALD,CADJ,CADJ;AAiBH;;;;EArFajB,S;;AAuFlB,eAAeI,GAAf","sourcesContent":["import React , { Component } from \"react\";\r\nimport Web3 from \"web3\";\r\nimport detectEthereumProvider from \"@metamask/detect-provider\";\r\nimport KryptoBird from '../abis/KryptoBird.json'\r\n\r\nclass App extends Component {\r\n      async componentDidMount() {\r\n        await this.loadweb3();\r\n        await this.loadBlockchainData();\r\n      }\r\n\r\n    async loadweb3() {\r\n        const provider = await detectEthereumProvider();\r\n        if(provider){\r\n            console.log('ethereum wallet connected');\r\n            window.web3 = new Web3(provider)\r\n        }else {\r\n            console.log('no ethereum provider detected');\r\n        }\r\n    }\r\n\r\n    async loadBlockchainData() {\r\n        const web3 = window.web3\r\n        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n        this.setState({account:accounts})\r\n        console.log(this.state.account);\r\n\r\n        const netWorkId = await web3.eth.net.getId()\r\n        const networkData = KryptoBird.networks[netWorkId]\r\n          if(networkData) {\r\n            const abi = KryptoBird.abi;\r\n            const address = networkData.address;\r\n            const contract = new web3.eth.Contract(abi, address);\r\n            this.setState({contract})\r\n            console.log(this.state.contract);\r\n\r\n            const totalSupply = await contract.methods.totalSupply().call();\r\n            this.setState({totalSupply})\r\n            console.log(this.state.totalSupply);\r\n\r\n\r\n                  for(let i = 1; i <= totalSupply; i++) {\r\n                      const KryptoBird = await contract.methods.kryptoBirdz(i - 1).call()\r\n                this.state({\r\n                    kryptoBirdz:[...this.state.kryptoBirdz, KryptoBird]\r\n                })\r\n                    }\r\n                    console.log(this.state.kryptoBirdz)\r\n                } else {\r\n            window.alert('smart contract not deployed')\r\n          }\r\n\r\n    }\r\n\r\n    mint = (KryptoBird) => {\r\n        this.state.contract.methods.mint(KryptoBird).send({from:this.state.account})\r\n        .once('receipt', (receipt)=> {\r\n           this.setState\r\n        })\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            account: '',\r\n            contract: null,\r\n            totalSupply:0,\r\n            kryptoBirdz:[]\r\n        }\r\n\r\n    }\r\n\r\n    render () {\r\n        return(\r\n            <div>\r\n                <nav className='navbar navbar-dark fixed-top bg-dark flex-md-nowrap shaddow p-0'>\r\n                 <div className=\"navbar-brand col-sm-3 col-md-3 mr-0\"\r\n                      style={{color:'white'}}>\r\n                      Krypto Birdz NFTs (Non Fungible Tokens)\r\n                 </div>\r\n                 <ul className=\"navbar-nav px-3\">\r\n                   <li className=\"nav-item text-nowrap d-none d-sm-none d-sm d-sm-block\">\r\n                    <small className=\"text-white\">\r\n                        {this.state.account}\r\n                    </small>\r\n                   </li>       \r\n                 </ul>\r\n                </nav>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default App;"]},"metadata":{},"sourceType":"module"}