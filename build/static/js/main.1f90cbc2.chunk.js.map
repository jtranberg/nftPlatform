{"version":3,"sources":["components/App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","mint","kryptoBird","state","contract","methods","send","from","account","once","receipt","setstate","kryptoBirdz","concat","toConsumableArray","KryptoBird","totalSupply","loadweb3","loadBlockchainData","detectEthereumProvider","provider","console","log","window","web3","Web3","ethereum","request","method","accounts","setState","eth","net","getId","netWorkId","networkData","networks","abi","address","Contract","i","alert","_this2","react_default","a","createElement","className","kryptobirdz","style","color","role","opacity","onSubmit","event","preventDefault","value","type","placeholder","ref","input","margin","map","key","mdb_react_ui_kit_esm","maxWidth","src","position","height","marginRight","href","Component","Boolean","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1f90cbc2.chunk.js","sourcesContent":["import React , { Component } from \"react\";\r\nimport Web3 from \"web3\";\r\nimport detectEthereumProvider from \"@metamask/detect-provider\";\r\nimport KryptoBird from '../abis/KryptoBird.json'\r\nimport {MDBCard, MDBCardBody, MDBCardTitle, MDBCardText, MDBCardImage, MDBBtn} from  'mdb-react-ui-kit'\r\nimport './app.css';\r\n\r\nclass App extends Component {\r\n      async componentDidMount() {\r\n        await this.loadweb3();\r\n        await this.loadBlockchainData();\r\n      }\r\n\r\n    async loadweb3() {\r\n        const provider = await detectEthereumProvider();\r\n        if(provider){\r\n            console.log('ethereum wallet connected');\r\n            window.web3 = new Web3(provider)\r\n        }else {\r\n            console.log('no ethereum provider detected');\r\n        }\r\n    }\r\n\r\n    async loadBlockchainData() {\r\n        const web3 = window.web3\r\n        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n        this.setState({account:accounts[0]})\r\n        console.log(this.state.account);\r\n\r\n        const netWorkId = await web3.eth.net.getId()\r\n        const networkData = KryptoBird.networks[netWorkId]\r\n          if(networkData) {\r\n            const abi = KryptoBird.abi;\r\n            const address = networkData.address;\r\n            const contract = new web3.eth.Contract(abi, address);\r\n            this.setState({contract})\r\n            console.log(this.state.contract);\r\n\r\n            const totalSupply = await contract.methods.totalSupply().call();\r\n            this.setState({totalSupply})\r\n            console.log(this.state.totalSupply);\r\n\r\n\r\n                  \r\n                    for(let i = 1; i <= totalSupply; i++) {\r\n                        const KryptoBird = await contract.methods.kryptoBirdz(i - 1).call()\r\n                        this.setState({\r\n                            kryptoBirdz:[...this.state.kryptoBirdz, KryptoBird]\r\n                        })\r\n                    }\r\n                    console.log(this.state.kryptoBirdz)\r\n                } else {\r\n            window.alert('smart contract not deployed')\r\n          }\r\n\r\n    }\r\n\r\n    mint = (kryptoBird) => {\r\n        this.state.contract.methods.mint(kryptoBird).send({from:this.state.account})\r\n        .once('receipt', (receipt)=> {\r\n            this.setstate({\r\n                kryptoBirdz:[...this.state.kryptoBirdz, KryptoBird]\r\n            })\r\n        })\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            account: '',\r\n            contract: null,\r\n            totalSupply:0,\r\n            kryptoBirdz:[]\r\n        }\r\n\r\n    }\r\n\r\n    render () {\r\n        return(\r\n            <div className='container-filled'>\r\n                {console.log(this.state.kryptobirdz)}\r\n                <nav className='navbar navbar-dark fixed-top bg-dark flex-md-nowrap shaddow p-0'>\r\n                 <div className=\"navbar-brand col-sm-3 col-md-3 mr-0\"\r\n                      style={{color:'white'}}>\r\n                      Krypto Birdz NFTs (Non Fungible Tokens)\r\n                 </div>\r\n                 <ul className=\"navbar-nav px-3\">\r\n                   <li className=\"nav-item text-nowrap d-none d-sm-none d-sm d-sm-block\">\r\n                    <small className=\"text-white\">\r\n                        {this.state.account}\r\n                    </small>\r\n                   </li>       \r\n                 </ul>\r\n                </nav>\r\n\r\n                <div className=\"container-fluid mt-1\">\r\n                    <div className=\"row\">\r\n                      <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\r\n                         <div className=\"content mr-auto ml-auto\"\r\n                             style={{opacity:0.8}}>\r\n                            <h1 style={{color:'black'}}>kryptoBirdz - NFT Marketplace</h1>\r\n                         <form onSubmit={(event)=> {\r\n                            event.preventDefault()\r\n                            const kryptoBird = this.kryptoBird.value\r\n                            this.mint(kryptoBird)\r\n                        }}>\r\n                            <input \r\n                            type='text' \r\n                            placeholder='add file location'\r\n                            className='form-control mb-1'\r\n                            ref={(input)=>this.kryptoBird = input}\r\n                            />\r\n                            <input \r\n                            style={{margin:'6px'}}\r\n                            type='submit' \r\n                            className='btn btn-primary btn-black'\r\n                            value='MINT'\r\n                            />\r\n                            </form>     \r\n                         </div>\r\n                      </main>\r\n                    </div>\r\n                    <hr></hr>\r\n                    <div className=\"row textCenter\">\r\n                        {this.state.kryptoBirdz.map((kryptoBird, key)=> {\r\n                           return(\r\n                            <div>\r\n                                <div>\r\n                                    <MDBCard className=\"token img\" style={{maxWidth:'22rem'}}>\r\n                                    <MDBCardImage src={kryptoBird} position='top'height='250rem' style={{marginRight: '4px'}}/>\r\n                                    <MDBCardBody>\r\n                                    <MDBCardTitle>  KryptoBirdz  </MDBCardTitle>\r\n                                    <MDBCardText>  This is a KryptoBird  20 uniquely designed nft's. \r\n                                                   only one of each bird. </MDBCardText>\r\n                                    <MDBBtn href={kryptoBird}>Download</MDBBtn>\r\n                                    </MDBCardBody>\r\n                                    </MDBCard>\r\n                                </div>\r\n                            </div>\r\n                           )\r\n                        })}\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}